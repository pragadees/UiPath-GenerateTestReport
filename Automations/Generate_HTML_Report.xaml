<Activity mc:Ignorable="sap sap2010" x:Class="Generate_HTML_Report" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=mscorlib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_StrReportPath" Type="InArgument(x:String)" />
    <x:Property Name="in_DtmStartTime" Type="InArgument(s:DateTime)" />
    <x:Property Name="in_DtmEndTime" Type="InArgument(s:DateTime)" />
    <x:Property Name="in_TspnTotalExecutionTime" Type="InArgument(x:TimeSpan)" />
    <x:Property Name="in_StrOverallStatus" Type="InArgument(x:String)" />
    <x:Property Name="in_DtTestCaseStats" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_DtAssertionStats" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_StrTestSetName" Type="InArgument(x:String)" />
    <x:Property Name="in_StrOrchFolderPath" Type="InArgument(x:String)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>885,2405</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="33">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Globalization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="34">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Generate the HTML report. Also, enhance the report with test case logs" DisplayName="Generate_HTML_Report" sap:VirtualizedContainerService.HintSize="592,2340" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="strReportContents" />
      <Variable x:TypeArguments="x:String" Name="strTestCaseHTMLTemplate" />
      <Variable x:TypeArguments="x:String" Name="strTestCaseHTML">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="strAssertionTemplate" />
      <Variable x:TypeArguments="x:String" Name="strAssertionHTML">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ReadTextFile File="{x:Null}" DisplayName="Read Output Report" sap:VirtualizedContainerService.HintSize="530,80" sap2010:WorkflowViewState.IdRef="ReadTextFile_1">
      <ui:ReadTextFile.Content>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">strReportContents</mca:CSharpReference>
        </OutArgument>
      </ui:ReadTextFile.Content>
      <ui:ReadTextFile.FileName>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">in_StrReportPath</mca:CSharpValue>
        </InArgument>
      </ui:ReadTextFile.FileName>
    </ui:ReadTextFile>
    <Assign DisplayName="Replace Dashboard related field" sap:VirtualizedContainerService.HintSize="530,65" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">strReportContents</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18" xml:space="preserve">strReportContents.Replace("{{testSetName}}", in_StrTestSetName) //Update Test Set Name
	.Replace("{{startTime}}", in_DtmStartTime.ToString("F", CultureInfo.CreateSpecificCulture("en-US"))) //Replace Start Time
	.Replace("{{endTime}}", in_DtmEndTime.ToString("F", CultureInfo.CreateSpecificCulture("en-US"))) //Replace End Time
	.Replace("{{totalExecutionTime}}", String.Format("{0:%h}h {0:%m}m {0:%s}s", in_TspnTotalExecutionTime)) //Replace Total Execution Time
	.Replace("{{totalTests}}", in_DtTestCaseStats.Rows.Count.ToString())	//Replace total test count
	.Replace("{{overallStatus}}", in_StrOverallStatus) //Replace overall status
	.Replace("{{ passCount }}", in_DtTestCaseStats.Select("[Status] LIKE 'Passed'").Count().ToString()) //Update Pass count
	.Replace("{{ failCount }}", in_DtTestCaseStats.Select("[Status] LIKE 'Failed'").Count().ToString()) //Update fail count
	.Replace("{{ cancelledCount }}", in_DtTestCaseStats.Select("[Status] LIKE 'Cancelled'").Count().ToString())</mca:CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <ui:WriteTextFile File="{x:Null}" DisplayName="Write Dashboard" sap:VirtualizedContainerService.HintSize="530,133" sap2010:WorkflowViewState.IdRef="WriteTextFile_1">
      <ui:WriteTextFile.FileName>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">in_StrReportPath</mca:CSharpValue>
        </InArgument>
      </ui:WriteTextFile.FileName>
      <ui:WriteTextFile.Text>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">strReportContents</mca:CSharpValue>
        </InArgument>
      </ui:WriteTextFile.Text>
    </ui:WriteTextFile>
    <ui:ReadTextFile File="{x:Null}" DisplayName="Read Test Case HTML" FileName="Templates\\testCaseHTML.txt" sap:VirtualizedContainerService.HintSize="530,80" sap2010:WorkflowViewState.IdRef="ReadTextFile_2">
      <ui:ReadTextFile.Content>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">strTestCaseHTMLTemplate</mca:CSharpReference>
        </OutArgument>
      </ui:ReadTextFile.Content>
    </ui:ReadTextFile>
    <ui:ReadTextFile File="{x:Null}" DisplayName="Read Test Details HTML" FileName="Templates\\testDetailsHTML.txt" sap:VirtualizedContainerService.HintSize="530,80" sap2010:WorkflowViewState.IdRef="ReadTextFile_3">
      <ui:ReadTextFile.Content>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_15">strAssertionTemplate</mca:CSharpReference>
        </OutArgument>
      </ui:ReadTextFile.Content>
    </ui:ReadTextFile>
    <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DisplayName="For Each Row in Test Case Data Table" sap:VirtualizedContainerService.HintSize="530,1185" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
      <ui:ForEachRow.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="testCase" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Update Test Case HTML" sap:VirtualizedContainerService.HintSize="496,1069" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="sd:DataRow[]" Name="arrAssertionMatches" />
              <Variable x:TypeArguments="x:String" Name="strAssertTable">
                <Variable.Default>
                  <Literal x:TypeArguments="x:String" Value="" />
                </Variable.Default>
              </Variable>
              <Variable x:TypeArguments="x:String" Name="strJobLogs" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign Test Case HTML" sap:VirtualizedContainerService.HintSize="434,65" sap2010:WorkflowViewState.IdRef="Assign_5">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">strTestCaseHTML</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_49" xml:space="preserve">strTestCaseHTML + strTestCaseHTMLTemplate.Replace("{{testId}}", testCase["ID"].ToString())
	.Replace("{{testCaseName}}",testCase["Test Case Name"].ToString())</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <If sap2010:Annotation.AnnotationText="Update Test Case result badge" DisplayName="If Test Case is Success" sap:VirtualizedContainerService.HintSize="434,56" sap2010:WorkflowViewState.IdRef="If_1">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_23">testCase["Status"].ToString().ToLower().Equals("passed")</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Update Test Case Status to Passed" sap:VirtualizedContainerService.HintSize="262,65" sap2010:WorkflowViewState.IdRef="Assign_6">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">strTestCaseHTML</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22" xml:space="preserve">strTestCaseHTML.Replace("{{badgeClass}}", "badge-success")
	.Replace("{{testCaseStatus}}",testCase["Status"].ToString())</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <If DisplayName="If Failure" sap:VirtualizedContainerService.HintSize="569,224" sap2010:WorkflowViewState.IdRef="If_2">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">testCase["Status"].ToString().ToLower().Equals("failed")</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <Assign DisplayName="Update Test Case Status to Cancelled" sap:VirtualizedContainerService.HintSize="262,65" sap2010:WorkflowViewState.IdRef="Assign_7">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">
                          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_9">strTestCaseHTML</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25" xml:space="preserve">strTestCaseHTML.Replace("{{badgeClass}}", "badge-danger")
	.Replace("{{testCaseStatus}}",testCase["Status"].ToString())</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Update Test Case Status - other" sap:VirtualizedContainerService.HintSize="262,65" sap2010:WorkflowViewState.IdRef="Assign_8">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">
                          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_10">strTestCaseHTML</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_26" xml:space="preserve">strTestCaseHTML.Replace("{{badgeClass}}", "badge-warning")
	.Replace("{{testCaseStatus}}",testCase["Status"].ToString())</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
              </If.Else>
            </If>
            <If sap2010:Annotation.AnnotationText="Update Data variation number" DisplayName="If Data Variation" sap:VirtualizedContainerService.HintSize="434,67" sap2010:WorkflowViewState.IdRef="If_3">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_27">Convert.ToInt32(testCase["Data Variation"]) &gt; 0</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Assign DisplayName="Update Data Variation Count" sap:VirtualizedContainerService.HintSize="262,61" sap2010:WorkflowViewState.IdRef="Assign_9">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_11">strTestCaseHTML</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_42">strTestCaseHTML.Replace("{{dataVariation}}",String.Format("&lt;p class=\"badge badge-secondary\"&gt;Data Variation - {0}&lt;/p&gt;",testCase["Data Variation"].ToString()))</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <Assign DisplayName="Update Data Variation Count" sap:VirtualizedContainerService.HintSize="262,61" sap2010:WorkflowViewState.IdRef="Assign_11">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">strTestCaseHTML</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_32">strTestCaseHTML.Replace("{{dataVariation}}","")</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Else>
            </If>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Automations\\API_Get_Job_Logs_using_JobKey.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="434,113" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Automations\\API_Get_Job_Logs_using_JobKey.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrJobKey">
                  <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_46">testCase["JobKey"].ToString()</mca:CSharpValue>
                </InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StrFolderName">
                  <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_47">in_StrOrchFolderPath</mca:CSharpValue>
                </InArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="out_StrJobLogs">
                  <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_22">strJobLogs</mca:CSharpReference>
                </OutArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <Assign DisplayName="Update Assertion" sap:VirtualizedContainerService.HintSize="434,65" sap2010:WorkflowViewState.IdRef="Assign_12">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_18">strAssertionHTML</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_50" xml:space="preserve">strAssertionHTML + strAssertionTemplate.Replace("{{testId}}", testCase["ID"].ToString())
	.Replace("{{testCaseName}}", testCase["Test Case Name"].ToString())
	.Replace("{{passCount}}", in_DtAssertionStats.Select(String.Format("[ID] = {0} AND [AssertionStatus] LIKE 'Passed'", testCase["ID"])).Count().ToString())
	.Replace("{{failCount}}", in_DtAssertionStats.Select(String.Format("[ID] = {0} AND [AssertionStatus] LIKE 'Failed'", testCase["ID"])).Count().ToString())
    .Replace("{{testCaseLogs}}", strJobLogs)</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Find Corresponding Assertion" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="Assign_13">
              <Assign.To>
                <OutArgument x:TypeArguments="sd:DataRow[]">
                  <mca:CSharpReference x:TypeArguments="sd:DataRow[]" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">arrAssertionMatches</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="sd:DataRow[]">
                  <mca:CSharpValue x:TypeArguments="sd:DataRow[]" sap2010:WorkflowViewState.IdRef="CSharpValue`1_35">in_DtAssertionStats.Select("[ID] = "+testCase["ID"])</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each - Assertion for the test case" sap:VirtualizedContainerService.HintSize="434,190" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="sd:DataRow">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="sd:DataRow" Name="assertion" />
                  </ActivityAction.Argument>
                  <Assign DisplayName="Assign - Assertion Details" sap:VirtualizedContainerService.HintSize="262,65" sap2010:WorkflowViewState.IdRef="Assign_15">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_20">strAssertTable</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_43" xml:space="preserve">strAssertTable+ String.Format("&lt;tr&gt;&lt;td scope=\"row\" class=\"text-info\"&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td class=\"{2}\"&gt;{3}&lt;/td&gt;&lt;td&gt;{4}&lt;/td&gt;&lt;/tr&gt;",
Convert.ToDateTime(assertion["Timestamp"]).ToString("dd-MMM-yyyy HH:mm:ss tt"),
assertion["AssertionName"].ToString(),
assertion["AssertionStatus"].ToString().ToLower().Equals("passed") ? "text-success" : "text-danger",
assertion["AssertionStatus"].ToString(),
assertion["AssertionMessage"].ToString().Replace("&lt;","&amp;lt;"))</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </ActivityAction>
              </ui:ForEach.Body>
              <ui:ForEach.Values>
                <InArgument x:TypeArguments="sc:IEnumerable">
                  <mca:CSharpValue x:TypeArguments="sc:IEnumerable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_39">arrAssertionMatches</mca:CSharpValue>
                </InArgument>
              </ui:ForEach.Values>
            </ui:ForEach>
            <Assign DisplayName="Update Assertion Data" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="Assign_16">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_21">strAssertionHTML</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_41">strAssertionHTML.Replace("{{assertionTable}}", strAssertTable)</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </ActivityAction>
      </ui:ForEachRow.Body>
      <ui:ForEachRow.DataTable>
        <InArgument x:TypeArguments="sd:DataTable">
          <mca:CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">in_DtTestCaseStats</mca:CSharpValue>
        </InArgument>
      </ui:ForEachRow.DataTable>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEachRow>
    <Assign DisplayName="Update Test Case Results in Output" sap:VirtualizedContainerService.HintSize="530,61" sap2010:WorkflowViewState.IdRef="Assign_10">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_12">strReportContents</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31">strReportContents.Replace("{{testCases}}", strTestCaseHTML)</mca:CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Update Assertions to Output file" sap:VirtualizedContainerService.HintSize="530,61" sap2010:WorkflowViewState.IdRef="Assign_14">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">
          <mca:CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_19">strReportContents</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_37">strReportContents.Replace("{{testAssertionData}}", strAssertionHTML)</mca:CSharpValue>
        </InArgument>
      </Assign.Value>
    </Assign>
    <ui:WriteTextFile File="{x:Null}" DisplayName="Write Test Case Results" sap:VirtualizedContainerService.HintSize="530,133" sap2010:WorkflowViewState.IdRef="WriteTextFile_2">
      <ui:WriteTextFile.FileName>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">in_StrReportPath</mca:CSharpValue>
        </InArgument>
      </ui:WriteTextFile.FileName>
      <ui:WriteTextFile.Text>
        <InArgument x:TypeArguments="x:String">
          <mca:CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">strReportContents</mca:CSharpValue>
        </InArgument>
      </ui:WriteTextFile.Text>
    </ui:WriteTextFile>
  </Sequence>
</Activity>